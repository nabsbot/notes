git clone https://github.com/dmcinnes/HTML5-Asteroids

git log 
git diff (note can use 1st 4 chars of commit id as a reference)
git diff 1245 3334  (shows what changes must be made to 1245 to get to 3334 - diff old vs new )


TERMINOLOGY
-----------
GitHub uses the email address set in your local Git configuration to associate commits pushed from the command line with your GitHub account. This can be set globally or per repository
Note: If your commits are linked to another user, that does not mean the user can access your repository.
A user can only access a repository you own if you add them as a collaborator or add them to a team that has access to the repository.
The author of a commit in git is just metadata. You can set it to whatever you want. This is a necessary feature for distributed workflows, or any kind of workflow where one person may be committing on another person's behalf.
git config --global user.email nabsbot@gmail.com
git config --global user.name "N A"

repository - group of related files

clone - takes a copy of a repository (url)

log  - history of commits

HEAD is what Git calls the commit you are currently on. You can "detach" the HEAD by switching to a previous commit

checkout - restore all files to the point of an earlier commit

git init (empty repository)

git add (to staging)
git reset 
	no args: remove changes from staging from staging, leave working copy
	--hard: discards any changes in staging and working (not reversible). 

git status - shows working dir and staging status
git commit -m "msg"
	stand practice to make the message a command 'Add file ...'
	c.f Commit message Style Guide.htm

git diff 
	no argumentes: compares working directory and staging area
	--staged : staged vs latest commit in repository
	

Branches
--------
Branches are labels for commits.   
master is the main branch by convention
detached head = commit with no branch name
if you check out a branch and the commit the branch label updates to the new commit and stays checked out.  
The current last commit = the tip of a branch
A single commit can have more than one branch label, but a commit only updates the branch that is checked out.

in asteroids
$ git clone https://github.com/udacity/asteroids.git 

$ git branch easy-game # create branch
$ git branch # list branches 
$ git checkout easy-game
$ git checkout -m easy-game easy-mode # rename
$ git checkout coins
$ git log --graph --oneline master coins # representation of master and coin commits as branches

Concepts
--------
commits have parents
log traces from child to parents until the intial commit and will only show the commits that are "reachable" from the commit/branch you are at.
HEAD = current commit. If you check out a commit then the detached head is not reachable (it is not attached to any named branch) 

git checkout -b new_branch # creates bew branch and checks it out.  

Merge
------
git compares tips with the point where the branches diverged.  
e.g when we merge coin branch into master branch, master will have a commit of all the changes to coins plus the commits that created them.  
We can then delete the coin branch, since the coin commits are now reachable from branch.  
If we deleted the coin branch before merging the coin commits would be lost (strictly speaking they become unreachable unless you know the commit id - eventual the garbage collector removes them).

$ git gc # run garbage collection manually

$ git checkout master

$ git merge master coins

log presents the commits in time stamp order, and if the log is based on merged branches the preceeding commit is not necessarily the parent

$ git diff 40357 354d # diff to preceeding commit
$ git show  40357  # diff to parent (ie changes submited in the commit)
$ git branch -d coins

note 
git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2.

merge conflicts
---------------
e.g both version attempt to modify the same line(s) of the original.

merge master to branch
---------------------
to include the latest official changes into your branch
$ git merge master easy-mode # merge master to easy mode

resovle conflicts 

$ git add game.js

$ git commit # commit resolution - this will complete the merge when all conflicts are resolved.

$ git log -n 1 # show latest commti

CRLF
----
CRLF LF confuses merge:

$ git config --global core.autocrlf true
https://help.github.com/articles/dealing-with-line-endings/#platform-all


------
GitHub - nabsbot@gmail.com 
------
syncing :  git hub sends and recieves git commits (working and staging areas on git hub are not accessible)

creating a repository:

you can't clone from github without an empty repository
you can push or pull commit(s) to a remote repository
typicall you push a branch and this will send all the commits reachable behind the tip (in fact git will not send commits that are already present)


1. create a remote on github

from remote
$ mkdir notes
$ cd notes
$ git init # initialize empty remote directory
$ git pull origin master # pull remote to local branch:   note if you have used passwd sync then you will need to supply username/pword first time

from existing
$ git remote add origin https://github.com/nabsbot/notes.git #  https,: remote can be given any name - this is the name within this repository used to refer to the remote - convention is to use 'origin' if you only have one remote.F
$ git remote add origin git@github.com:nabsbot/notes.git # ssh
$ git push -u origin master # push existing to remote from local branch:   note if you have used passwd sync then you will need to supply username/pword first time

$ git remote -v 


when new files are added to the remote repository we need to pull in the changes.  E.g add a file via the website.

$ git pull origin master

Forking
-------
take a copy on github without pulling it down to your repository.
A fork is just a clone that github makes for you, but it maintains a link to the original and counts the number of forks made.

process is 1. fork; 2 clone ; 
https://github.com/LarryMad/recipes

$ git clone https://github.com/nabsbot/recipes.git # this automacially creates a remote

$ git remote -v

add collaborator (allow them to push to your repository) in git hub

clone



working with remote repositories
--------------------------------

to make an existing branch track remote branch, you must say so explicity.
$ git pull # can proide useful tips
e.g 
$  git branch --set-upstream-to=origin/master master
$ git branch -u orign/master master  # eitehr command will cause local branch master to track upstream origin/master

a short cut is:
$ git push -u origin my_branch



--

$ git diff origin/master master

$ git reset --hard origin/master - remove all local changes and reset to remote

$ git push: move your changes to the remote (this might get rejected if there are already other changes on the remote)
$ git pull: get the changes (if any) from the remote and merge them into your changes
$ git pull --rebase: as above, but try to redo your commits on top of the remote changes


env
---

cf bash files: ~/.git-*

$ git config --global push.default upstream

$ git config --global merge.conflictstyle diff3 # show head (current commit in current branch), common ancesstor, and code being mergeed in 

Password Caching 
----------------
$ git config --global credential.helper osxkeychain
password caching will let you type your password once and have it auto-filled on that computer in the future
https://help.github.com/articles/caching-your-github-password-in-git/

ssh
---
to pull and push to different accounts you neeed two ssh keys

That's because github.com distinguishes not by user, which is always just git, but by the ssh key you used to connect.

$ ssh-keygen -t rsa -b 4096 -C "nabsbot@gmail.com" # do not overwrite current public key - rename as id_rsa_nabsbot
then add the public key to your account

$ eval "$(ssh-agent -s)" # for some reason this only starts when logging in on mac, use this when su-ing
$ ssh-add ~/.ssh/id_rsa_nabsbot # adds this private key to the ssh security agent 

$ ssh-keygen -p  # change passphrase

add host (known_Hosts lets the client authenticate the server to check it is not connect to an impersonator)
$ ssh-keyscan -H github.com >> ~/.ssh/known_hosts

$ ssh -T git@github.com # test the connection

a config file is used to allow differnt keys from the same account
the final entry tells osx to automatically add the private key to the ssh-agent and to store the passphrase in the keychain
note the ssh-agent can cause issues as it will supply the key and ignore the identity file specified in the config:
The IdentitiesOnly .ssh/config configuration keyword can be used to limit the keys that ssh offers to the remote sshd to just those specified via IdentityFile keywords (i.e. it will refuse to use any additional keys that happen to be loaded into an active ssh-agent).
$ ssh -vT git@github.com

------------------------------------
Host github.com
	HostName github.com
	User git
	IdentityFile ~/.ssh/id_rsa
	IdentitiesOnly yes

Host nabsbot.github.com
	HostName github.com	
	User git
	IdentityFile ~/.ssh/id_rsa_nabsbot
	IdentitiesOnly yes

Host *
 AddKeysToAgent yes
 UseKeychain yes
------------------------------------

add the private key to the ssh-agent and to store the passphrase in the keychain
$  eval "$(ssh-agent -s)"
$ ssh-add -K ~/.ssh/id_rsa


add the public key to your git hub account (settings)

test the connection
$ ssh -T git@github.com

confirm the public key fingerprint 

$ ssh-keygen -l -E md5 -f ~/.ssh/id_rsa.pub 
$ssh-keygen -l -f ~/.ssh/id_rsa.pub


git remote add : creates an alias for the repository
$ git remote add origin git@nabsbot.github.com:nabsbot/recipies.git # identify as nasbot
$ git remote add origin git@github.com:nabsbot/recipes.git # identify as default account

finally you need to change .git/config with the correct author information
notes
-----
passphrase :  generally refers to a secret used to protect an encryption key. Commonly, an actual encryption key is derived from the passphrase and used to encrypt the protected resource.
The purpose of the passphrase is usually to encrypt the private key. This makes the key file by itself useless to an attacker. It is not uncommon for files to leak from backups or decommissioned hardware, and hackers commonly exfiltrate files from compromised systems.
To use an encrypted key, the passphrase is also needed. In a way, they are two separate factors of authentication.

